{"category":"SignedByte","color":"#34a9de","blocks":["__SignedByte_Init","__SignedByte_decode","__SignedByte_encode"],"jscode":"// Block __SignedByte_Init\nvar __SignedByte_Init_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"SignedByte\"\n        }\n    ],\n    \"colour\": \"#34a9de\"\n};\n\nwindow['Blockly'].Blocks['__SignedByte_Init'] = {\n    init: function() {\n        this.jsonInit(__SignedByte_Init_json);\n    }\n};\n\nwindow['Blockly'].Python['__SignedByte_Init'] = function(block) {\n        return `def SignedByteEncode(number):\n  if number < 0:\n    abs_number = abs(number)\n    encoded = abs_number & 0xFF\n    encoded = ~encoded & 0xFF\n    encoded = (encoded + 1) & 0xFF\n    return encoded\n  else:\n    return number & 0xFF\n    \ndef SignedByteDecode(encoded):\n  if encoded & 0x80:\n    decoded = (~encoded + 1) & 0xFF\n    decoded = -decoded\n  else:\n    decoded = encoded\n  return decoded\n` + \"\\n\";\n};\n\n// Block __SignedByte_decode\nvar __SignedByte_decode_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"decode\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"byte\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"byte\"\n        }\n    ],\n    \"colour\": \"#34a9de\"\n};\n\nwindow['Blockly'].Blocks['__SignedByte_decode'] = {\n    init: function() {\n        this.jsonInit(__SignedByte_decode_json);\n    }\n};\n\nwindow['Blockly'].Python['__SignedByte_decode'] = function(block) {\n    var byte = Blockly.Python.valueToCode(block, 'byte', Blockly.Python.ORDER_NONE);\n    return [`SignedByteDecode(${byte})\n`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SignedByte_encode\nvar __SignedByte_encode_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"encode\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"number\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"number\"\n        }\n    ],\n    \"colour\": \"#34a9de\"\n};\n\nwindow['Blockly'].Blocks['__SignedByte_encode'] = {\n    init: function() {\n        this.jsonInit(__SignedByte_encode_json);\n    }\n};\n\nwindow['Blockly'].Python['__SignedByte_encode'] = function(block) {\n    var number = Blockly.Python.valueToCode(block, 'number', Blockly.Python.ORDER_NONE);\n    return [`SignedByteEncode(${number})\n`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","code":{"Init":["window['Blockly'].Python['__SignedByte_Init'] = function(block) {\n        return `def SignedByteEncode(number):\n  if number < 0:\n    abs_number = abs(number)\n    encoded = abs_number & 0xFF\n    encoded = ~encoded & 0xFF\n    encoded = (encoded + 1) & 0xFF\n    return encoded\n  else:\n    return number & 0xFF\n    \ndef SignedByteDecode(encoded):\n  if encoded & 0x80:\n    decoded = (~encoded + 1) & 0xFF\n    decoded = -decoded\n  else:\n    decoded = encoded\n  return decoded\n` + \"\\n\";\n};\n\n","def SignedByteEncode(number):\n  if number < 0:\n    abs_number = abs(number)\n    encoded = abs_number & 0xFF\n    encoded = ~encoded & 0xFF\n    encoded = (encoded + 1) & 0xFF\n    return encoded\n  else:\n    return number & 0xFF\n    \ndef SignedByteDecode(encoded):\n  if encoded & 0x80:\n    decoded = (~encoded + 1) & 0xFF\n    decoded = -decoded\n  else:\n    decoded = encoded\n  return decoded\n"],"decode":["window['Blockly'].Python['__SignedByte_decode'] = function(block) {\n    var byte = Blockly.Python.valueToCode(block, 'byte', Blockly.Python.ORDER_NONE);\n    return [`SignedByteDecode(${byte})\n`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","SignedByteDecode(${byte})\n"],"encode":["window['Blockly'].Python['__SignedByte_encode'] = function(block) {\n    var number = Blockly.Python.valueToCode(block, 'number', Blockly.Python.ORDER_NONE);\n    return [`SignedByteEncode(${number})\n`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","SignedByteEncode(${number})\n"]}}